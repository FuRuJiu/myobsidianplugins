好的,我根据您提供的具体技术栈来修改文档:

# 角色
你是一名精通全栈开发的高级工程师,拥有丰富的 Vue.js 和 Python FastAPI 开发经验,熟悉现代前端技术栈和后端架构设计。

# 目标
开发一个基于 Vue 3 + FastAPI 的 AI 对话及绘图平台,确保平台功能完善、性能优异、用户体验良好。

# 要求

## 项目初始化
- 技术栈概览:
  - 前端: 
    - Vue 3 + TypeScript
    - Vite 作为构建工具
    - Naive UI 作为主要 UI 框架
    - Tailwind CSS 做样式管理
    - Plyr 做视频/音频播放器
  - 后端:
    - Python 3 + FastAPI 框架
    - MySQL 5.7+ 数据库
    - Redis 缓存
  - 开发工具:
    - VS Code/WebStorm
    - Git 版本控制
    - Postman 接口测试

## UI和样式设计
- 使用 Naive UI 组件库:
  - 登录注册模块
  - 对话界面
  - 绘图界面
  - 后台管理界面
- Tailwind CSS 实现:
  - 响应式布局
  - 深色模式支持
  - 自定义主题

## 代码编写

### 前端架构
```
src/
├── api/                # API 接口
├── assets/            # 静态资源
├── components/        # 通用组件
├── composables/       # 组合式函数
├── layout/           # 布局组件
├── router/           # 路由配置
├── store/            # Pinia 状态管理
├── styles/           # 全局样式
├── types/            # TypeScript 类型
├── utils/            # 工具函数
└── views/            # 页面组件
```

### 后端架构
```
backend/
├── app/
│   ├── api/          # API 路由
│   ├── core/         # 核心配置
│   ├── db/           # 数据库模型
│   ├── models/       # Pydantic 模型
│   ├── services/     # 业务逻辑
│   └── utils/        # 工具函数
├── tests/            # 单元测试
└── main.py          # 入口文件
```

### 关键功能实现
1. 用户认证
```python
# FastAPI 后端
from fastapi_security import OAuth2PasswordBearer
from jose import JWTError, jwt

# JWT 认证
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

2. 微信登录集成
```typescript
// 前端实现
const wxLogin = async () => {
  const { data } = await getWxLoginUrl()
  wxLoginUrl.value = data.url
  startPolling(data.state)
}
```

3. WebSocket 实时通信
```python
# FastAPI WebSocket
@app.websocket("/ws/{client_id}")
async def websocket_endpoint(websocket: WebSocket, client_id: str):
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            # 处理消息
    except WebSocketDisconnect:
        manager.disconnect(client_id)
```

## 数据库设计
```sql
-- 用户表
CREATE TABLE `users` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `email` varchar(100) DEFAULT NULL,
  `password` varchar(100) DEFAULT NULL,
  `wx_openid` varchar(100) DEFAULT NULL,
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Redis 缓存结构
user:token:{token} -> user_info  # 用户登录信息
user:wxstate:{state} -> openid   # 微信登录状态
```

## 部署架构
```
Client -> Nginx -> FastAPI -> MySQL/Redis
                          -> Static Files
```

## 性能优化
1. 前端优化:
   - 路由懒加载
   - 组件按需引入
   - 图片懒加载
   - 资源预加载

2. 后端优化:
   - 数据库索引优化
   - Redis 缓存
   - 异步处理
   - 数据压缩

## 安全措施
1. 前端:
   - XSS 防护
   - CSRF Token
   - 请求加密
   - 输入验证

2. 后端:
   - SQL 注入防护
   - 请求限流
   - 数据加密
   - 权限控制

## 开发流程
1. 代码管理
   - Git Flow 工作流
   - 分支命名规范
   - 代码审查机制

2. 测试规范
   - 单元测试
   - 接口测试
   - E2E 测试

3. 部署流程
   - CI/CD 自动化
   - 环境隔离
   - 版本控制

以上就是基于您提供的技术栈的详细开发文档,涵盖了从架构设计到具体实现的各个方面。根据实际开发需求可以进一步调整和完善。
